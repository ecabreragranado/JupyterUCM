{"type":"cell","id":"0027bf","pos":22,"input":"Una función permite devolver un valor cuando le suministramos un argumento. Por ejemplo, la función `x`$^2$ devuelve el cuadrado del número que introduzcamos como argumento `x`. Python viene con múltiples funciones por defecto, pero en ocasiones, querremos definir una función nosotros mismos. Por ejemplo, a la hora de hacer un ajuste no lineal.  Veamos cómo hacerlo, ","cell_type":"markdown"}
{"type":"cell","id":"00a355","pos":16,"input":"long_de_onda = 25","cell_type":"code","exec_count":3}
{"type":"cell","id":"0d2cf2","pos":21,"input":"# Funciones","cell_type":"markdown"}
{"type":"cell","id":"18a060","pos":15,"input":"Cuando trabajamos con datos, normalmente los usamos más de una vez. Para poder recurrir a ellos cuando queramos, los almacenamos en variables. Por ejemplo,","cell_type":"markdown"}
{"type":"cell","id":"1b3409","pos":24,"input":"En la anterior celda hemos definido una función que hemos llamado `mifuncion` con un único argumento `x` y que devuelve la expresión $3 x^2 + 5 x$. Hemos usado varias cosas a la vez. Veámoslas una a una:\n\n* Para definir una función comenzamos con la palabra `def` y después escribimos el nombre de la función, poniendo entre paréntesis los argumentos de la misma. Finalmente tenemos que terminar esta primera línea con dos puntos `:`\n\n* A continuación escribimos el cuerpo de la función, es decir, las operaciones que queremos que se realicen cuando llamamos a nuestra función. Esta parte tiene que escribirse con un sangrado para indicar qué va dentro de la función. si a continuación queremos escribir una línea que no sea parte de la función, la escribiremos sin ese sangrado. Python sabrá entonces que eso no pertenece a la función.\n\n* Finalmente, y comenzando con la palabra `return` escribimos lo que queremos que la función devuelva.\n\nEste ejemplo también se podría haber escrito de forma más compacta como, ","cell_type":"markdown"}
{"type":"cell","id":"3a3e73","pos":26,"input":"# Ejercicio","cell_type":"markdown"}
{"type":"cell","id":"3a8cf1","pos":18,"input":"long_de_onda*5","cell_type":"code"}
{"type":"cell","id":"3e6ea4","pos":13,"input":"Como vemos, Python indica la operación `elevado a` con un doble asterisco. Otros programas como Octave/MATLAB lo hacen con el símbolo `^`.","cell_type":"markdown"}
{"type":"cell","id":"43cc84","pos":30,"input":"from numpy import *\nfrom matplotlib.pyplot import *","cell_type":"code"}
{"type":"cell","id":"4741fa","pos":17,"input":"Ahora, una vez ejecutada la celda anterior, podemos recurrir a la variable `long_de_onda` cuando queramos.","cell_type":"markdown"}
{"type":"cell","id":"498287","pos":6,"input":"# Uso de Python","cell_type":"markdown"}
{"type":"cell","id":"54b053","pos":7,"input":"Vamos a ver brevemente algunos aspectos de Python que usaremos en esta práctica así como en el resto de actividades que realizaremos con este tipo de documentos. Estas líneas no pretenden ser una guía de Python, únicamente servir para familiarizarse con el Notebook a partir de ejemplos sencillos.","cell_type":"markdown"}
{"type":"cell","id":"563e14","pos":28,"input":"# Módulos","cell_type":"markdown"}
{"type":"cell","id":"62fd49","pos":8,"input":"-----------------\nPrimero Python puede usarse como una calculadora. Ejecuta las siguientes celdas","cell_type":"markdown"}
{"type":"cell","id":"6abdaf","pos":10,"input":"4.0/7","cell_type":"code"}
{"type":"cell","id":"75c031","pos":11,"input":"Es necesario indicar que Python distingue entre la división `4.0/7` y `4/7`. La última la toma como una división entre enteros y su resultado será cero (otro entero), mientras que la primera la toma como una división entre números reales. Puedes crear una celda de código a continuación y comprobarlo escribiendo `4/7` y viendo el resultado","cell_type":"markdown"}
{"type":"cell","id":"7d8847","pos":20,"input":"frecuencia","cell_type":"code"}
{"type":"cell","id":"919cb5","pos":4,"input":"# IPython Notebook, ¿cómo se utiliza?","cell_type":"markdown"}
{"type":"cell","id":"91bdf5","pos":14,"input":"# Variables","cell_type":"markdown"}
{"type":"cell","id":"a28197","pos":2,"input":"# Contexto","cell_type":"markdown"}
{"type":"cell","id":"a51cbb","pos":29,"input":"Python es un lenguaje de programación de uso general, es decir, no está orientado en un principio a uso científico. Sin embargo, \ntiene una gran cantidad de módulos que le dan una gran versatilidad y en concreto, muchos que permiten un uso científico de alto nivel. Un módulo no es más que un archivo en donde se definen un conjunto de funciones para realizar distintas operaciones. En otros lenguajes se denominan librerías de funciones. Para hacer uso de esas funciones, tenemos que importar el módulo. Veremos cómo utilizarlos e importarlos más adelante. Por ahora, hay que destacar entre todos 3 esenciales a la hora de realizar cálculos científicos en Python. \n\n* Numpy\n\n* Scipy \n\n* Matplotlib\n\nEl primero de ellos, Numpy, proporciona las operaciones básicas para tratar con vectores y matrices, muchas de las funciones básicas como seno, coseno, exponencial, logaritmo, etc., así como algunas funciones para realizar la transformada de Fourier o álgebra lineal por ejemplo. Scipy es un conjunto de submódulos cada uno de los cuales se dedica a un tema distinto de cálculo numérico. Por ejemplo, encontramos en él un submódulo dedicado al procesado de imágenes (es decir, una librería de funciones especializadas en procesado de imágenes), otro dedicado a la optimización, otro distinto dedicado a estadística. Cada uno de estos submódulos contienen una gran cantidad de funciones útiles en estos campos. Para alguien familiarizado con MATLAB, podríamos decir que Scipy es como las toolboxes de este programa comercial, que extienden la funcionalidad del programa en distintos ámbitos.\n\nFinalmente, el módulo Matplotlib es el módulo más utilizado para obtener figuras en Python y es el que utilizaremos para dibujar nuestros resultados.\n\n**¿Cómo importar un módulo?**\n\nPara importar un módulo se utiliza el comando `import`. Se pueden importar todas las funciones de un módulo o bien únicamente una función determinada.\n\nAunque es más recomendable importar los módulos uno a uno, existe una forma de indicar al programa que cargue los módulos más utilizados, es decir, Numpy y Matplotlib. El módulo Scipy es algo más avanzado y las funciones que necesitemos de él las importaremos una a una cuando llegue el momento.\n\nPara ello antes de ejecutar cualquier código debemos escribir en una celda el comando:\n\n`%pylab inline`\n\nEste comando hace dos cosas a la vez. Por un lado, `%pylab` indica al programa que cargue todas las funciones de Numpy y Matplotlib. Además, añadiendo `inline` le decimos que muestre las figuras incrustadas en el documento.\n\nAsí pues, lo añadiremos a cada notebook al principio del documento, lo ejecutaremos y ya tendremos cargados los módulos para el resto de celdas (solo hay que ejecutarlo una vez). Es necesario indicar que si se cierra el notebook y se vuelve a abrir, este comando habrá de ejecutarse otra vez al principio de nuestra sesión.\n\nCon el único fin de mostrar todas las posibilidades, dejamos a continuación cómo sería la importación de todas las funciones de Numpy y de Matplotlib de forma individual (aunque no lo usaremos en en este curso).","cell_type":"markdown"}
{"type":"cell","id":"ae93cc","pos":5,"input":"Durante el curso utilizaremos en las prácticas el programa IPython, más concretamente su interfaz web IPython Notebook, es decir, se sirve del navegador web para visualizar los resultados. IPython Notebook permite combinar texto con fórmulas matemáticas, código, imágenes e incluso vídeos en un mismo documento por lo que resulta muy útil para trabajar en un proyecto científico o para documentar código. Para poder usarlo desde casa sin necesidad de instalarlo, disponemos de un servicio online que permite editar, ejecutar, salvar y gestionar una biblioteca de notebooks en la red. Este servicio que se llama [SageMathCloud](http://cloud.sagemath.org) es propocionado por la Universidad de Washington y permite tener un espacio personal en donde correr programas de distintos tipos, incluso editar un documento en LaTeX. También, por supuesto, permite crear, subir, editar y ejecutar notebooks.\n\nPara crear una cuenta en este servicio, se pueden seguir las instrucciones detalladas en la página del Campus Virtual del Laboratorio de Óptica Biomédica.\n\n**¿Cómo se utiliza?**\n\n--------------\n\nEl documento se divide en **celdas** que pueden ser de **texto** o de **código** de programación (estas últimas se etiquetan con el símbolo **In [ ]:** a su izquierda. Cuando se ejecutan, aparece un número entre los corchetes que identifica a esa celda). \n\n **¿Cómo modifico una celda de texto?**\n\nPara modificar un texto se ha de hacer doble-click con el ratón sobre él. Una vez terminada la modificación, y para salir del modo de escritura, se ha de pinchar con el ratón fuera de esa celda o bien _ejecutarla_ (al no haber código, la ejecución solo permite mostrar el texto de una forma más legible). Para ejecutar una celda, veáse un poco más abajo. \n\n **¿Cómo modifico una celda de código?**\n\nPara modificar el código y ver el resultado, se procede de la misma forma: doble-click con el ratón sobre el código, se procede a modificar los valores de los parámetros y posteriormente se ejecuta la celda. A continuación se describe cómo se realiza dicha ejecución.\n\n\n**¿Cómo ejecuto una celda?**\n\nPara ejecutar una celda y por ejemplo, ver el resultado del código que en ella se ha escrito, se ha de presionar a la vez _Mayúsculas + Enter_ o bien, pinchar con el ratón en el triángulo (símbolo de _Play_) que se encuentra en la barra superior (justo debajo de la opción en el menú indicada por la palabra _Cell_).\n\n\n**¿Cómo creo una celda nueva?**\n\nPara generar una nueva celda se puede hacer con el menú superior, \npinchando en *Insert* y eligiendo insertar una celda encima o debajo de la celda actual o bien con el comando _Ctrl-m b_ para insertar una celda \n\n\n**¿Cómo salvo mi documento?**\n\nEl documento se autosalva automáticamente cada 2 minutos. Aun así, se puede pinchar en **File** en la barra superior y después en **Save and Checkpoint**. Esto obligará a salvar el documento pero además creará una imagen del documento a la que se puede volver más adelante, por si se hace un cambio que no se desee y se haya autosalvado. Por último, para cerrar el documento limpiamente se ha de pinchar de nuevo en **File** y después en **Close and halt**.","cell_type":"markdown"}
{"type":"cell","id":"b6ddb0","pos":0,"input":"# Introducción a Python (I)","cell_type":"markdown"}
{"type":"cell","id":"bc2fc9","pos":12,"input":"3**2","cell_type":"code"}
{"type":"cell","id":"bc47d5","pos":9,"input":"5.0*25","cell_type":"code"}
{"type":"cell","id":"ca56d4","pos":19,"input":"Podemos escribir los nombres que queramos (o casi, hay algunos nombres reservados, pero son pocos) para las variables, pero es mejor dar nombres representativos. Si no hemos definido una variable y la llamamos, Python nos dará error.","cell_type":"markdown"}
{"type":"cell","id":"ccd9a5","pos":1,"input":"Editar esta celda (haciendo doble click con el ratón) para introducir el nombre y apellidos.\n\n**Nombre y Apellidos**:","cell_type":"markdown"}
{"type":"cell","id":"d8ec63","pos":23,"input":"def mifuncion(x):\n    u = 3*x**2\n    v = 5*x\n    return u + v","cell_type":"code"}
{"type":"cell","id":"f2147b","pos":3,"input":"Python se ha convertido en uno de los lenguajes más populares y por tanto usados en muy diferentes áreas. También ha ganado cada vez más terreno en el ámbito científico, gracias a una gran cantidad de módulos científicos de calidad gratuitos y a una sintaxis limpia y fácil de aprender.\n\nEn este notebook vamos a ver varios conceptos que nos servirán de base para representar datos, ajustarlos a un módelo (ya sea un modelo lineal o una función más complicada) y a efectuar un análisis de los resultados. Será por tanto una muy breve introducción, fijándonos únicamente en lo que nos sea útil para poder trabajar con Python. Para una explicación más detallada, es muy recomendable consultar alguno de los siguientes enlaces:\n\n* [Tutorial de Python](http://docs.python.org/2/tutorial/)\n* [Dive into Python](http://www.diveintopython.net/toc/index.html)\n* [Tutorial de Python en español, con libro en pdf](http://mundogeek.net/tutorial-python)\n* [Tutorial sobre las herramientas científicas en Python](http://scipy-lectures.github.com/index.html)\n* [Diversas lecciones sobre computación científica con Python](https://github.com/jrjohansson/scientific-python-lectures#online-read-only-versions)\n\n\nAntes de empezar, una nota para los usuarios de Octave/MATLAB. La sintaxis de las distintas órdenes que usemos son muy similares a las usadas en estos programas, y básicamente la mayor parte de los comandos válidos en aquellos programas son válidos para Python. Para facilitar la transición a Python, se puede consultar el siguiente enlace, \n\n[Equivalencia de comandos para usuarios de MATLAB](http://www.scipy.org/NumPy_for_Matlab_Users)","cell_type":"markdown"}
{"type":"cell","id":"f2e559","pos":25,"input":"def mifuncion(x):\n    return 3*x**2 + 5*x","cell_type":"code"}
{"type":"cell","id":"faae85","pos":27,"input":"* Define una función que tenga como argumentos 3 variables $x$, $y$ y $z$ y devuelva $x^2 - 3y + z$","cell_type":"markdown"}
{"type":"file","last_load":1530257579383}
{"type":"settings","metadata":{"name":"","signature":"sha256:0bb03558d07f0d02e9fa39d92db5fda763717a359b839423247cd7c5366741c6"},"backend_state":"running","kernel_state":"idle","kernel":"sagemath","kernel_usage":{"cpu":0,"memory":264650752}}